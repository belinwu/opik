import pydantic
from typing import Optional, Dict, Any
from . import base_original_provider_usage
from opik import dict_utils

class OpenAICompletionsUsage(base_original_provider_usage.BaseOriginalProviderUsage):
    completion_tokens: int
    """Number of tokens in the generated completion."""

    prompt_tokens: int
    """Number of tokens in the prompt."""

    total_tokens: int
    """Total number of tokens used in the request (prompt + completion)."""

    completion_tokens_details: Optional["CompletionTokensDetails"] = None
    """Breakdown of tokens used in a completion."""

    prompt_tokens_details: Optional["PromptTokensDetails"] = None
    """Breakdown of tokens used in the prompt."""


    def to_backend_compatible_flat_dict(self) -> Dict[str, int]:
        result = {**self.__dict__}
        
        if self.completion_tokens_details is not None:
            result["completion_tokens_details"] = self.completion_tokens_details.__dict__
        
        if self.prompt_tokens_details is not None:
            result["prompt_tokens_details"] = self.prompt_tokens_details.__dict__

        result = dict_utils.remove_none_from_dict(result)
        result = dict_utils.flatten_dict(d=result, delim=".", parent_key="original_usage")

        return result
    
    @classmethod
    def from_original_usage_dict(usage_dict: Dict[str, Any]) -> "OpenAICompletionsUsage":
        completion_tokens_details = CompletionTokensDetails(**usage_dict.pop("completion_tokens_details", None))
        prompt_tokens_details = PromptTokensDetails(**usage_dict.pop("completion_tokens_details", None))

        return OpenAICompletionsUsage(
            **usage_dict,
            completion_tokens_details=completion_tokens_details,
            prompt_tokens_details=prompt_tokens_details
        )



class CompletionTokensDetails(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(extra="allow")

    accepted_prediction_tokens: Optional[int] = None
    """
    When using Predicted Outputs, the number of tokens in the prediction that
    appeared in the completion.
    """

    audio_tokens: Optional[int] = None
    """Audio input tokens generated by the model."""

    reasoning_tokens: Optional[int] = None
    """Tokens generated by the model for reasoning."""

    rejected_prediction_tokens: Optional[int] = None
    """
    When using Predicted Outputs, the number of tokens in the prediction that did
    not appear in the completion. However, like reasoning tokens, these tokens are
    still counted in the total completion tokens for purposes of billing, output,
    and context window limits.
    """


class PromptTokensDetails(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(extra="allow")

    audio_tokens: Optional[int] = None
    """Audio input tokens present in the prompt."""

    cached_tokens: Optional[int] = None
    """Cached tokens present in the prompt."""